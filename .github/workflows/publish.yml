name: Publish to npm

on:
  schedule:
    - cron: '0 6 * * *' # Daily at 6 AM UTC
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  BUN_VERSION: '1.2.16'

jobs:
  publish:
    name: Extract, Build & Publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Check for @ai-sdk package updates
        id: check-updates
        run: |
          echo "Checking for @ai-sdk package updates..."

          # Install current dependencies to ensure we have latest lockfile
          bun install --frozen-lockfile

          # Check for outdated @ai-sdk packages
          OUTDATED_OUTPUT=$(bun outdated --json 2>/dev/null || echo "[]")

          # Check if any @ai-sdk packages have updates available
          NEEDS_UPDATE=false
          if echo "$OUTDATED_OUTPUT" | jq -e '.[] | select(.name | startswith("@ai-sdk/"))' > /dev/null 2>&1; then
            echo "🔄 Found @ai-sdk package updates:"
            echo "$OUTDATED_OUTPUT" | jq -r '.[] | select(.name | startswith("@ai-sdk/")) | "  - \(.name): \(.current) → \(.latest)"'
            NEEDS_UPDATE=true
          else
            echo "✅ All @ai-sdk packages are up to date"
          fi

          echo "needs-update=$NEEDS_UPDATE" >> $GITHUB_OUTPUT

      - name: Update @ai-sdk dependencies
        if: steps.check-updates.outputs.needs-update == 'true'
        run: |
          echo "🔄 Updating @ai-sdk dependencies to latest versions..."

          # Get list of @ai-sdk packages that need updates
          OUTDATED_OUTPUT=$(bun outdated --json 2>/dev/null || echo "[]")
          AI_SDK_PACKAGES=$(echo "$OUTDATED_OUTPUT" | jq -r '.[] | select(.name | startswith("@ai-sdk/")) | .name')

          # Update each @ai-sdk package individually
          for package in $AI_SDK_PACKAGES; do
            echo "Updating $package..."
            bun update $package
          done

          echo "✅ @ai-sdk dependencies updated"

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Extract model types
        run: bun src/extract-model-types.ts

      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet src/ai-models.ts; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No model changes detected"
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Model changes detected"
          fi

      - name: Update documentation
        if: steps.check-changes.outputs.has-changes == 'true' || steps.check-updates.outputs.needs-update == 'true'
        run: |
          # Build package to get accurate stats
          bun run bundle

          # Get current stats
          TOTAL_MODELS=$(node -p "require('./dist/index.cjs').ALL_MODELS.length")
          TOTAL_PROVIDERS=$(node -p "require('./dist/index.cjs').getProviders().length")
          TOTAL_CATEGORIES=$(node -p "require('./dist/index.cjs').getCategories().length")

          echo "📊 Current stats:"
          echo "  Models: $TOTAL_MODELS"
          echo "  Providers: $TOTAL_PROVIDERS"
          echo "  Categories: $TOTAL_CATEGORIES"

          # Update README with current stats
          sed -i "s/- **Total Models**: Updated with latest AI SDK providers/- **Total Models**: $TOTAL_MODELS/" README.md
          sed -i "s/- **Providers**: 28+ supported providers/- **Providers**: $TOTAL_PROVIDERS supported providers/" README.md
          sed -i "s/- **Categories**: Chat, Embedding, Image, Speech, Transcription, etc./- **Categories**: $TOTAL_CATEGORIES categories (Chat, Embedding, Image, Speech, Transcription, etc.)/" README.md

          # Create or update a stats file
          cat > STATS.md << EOF
          # AI Models Statistics

          Last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')

          ## Current Statistics

          - **Total Models**: $TOTAL_MODELS
          - **Providers**: $TOTAL_PROVIDERS
          - **Categories**: $TOTAL_CATEGORIES

          ## Top Providers by Model Count

          \`\`\`javascript
          $(node -p "
            const { ALL_MODELS } = require('./dist/index.cjs');
            const counts = ALL_MODELS.reduce((acc, model) => {
              acc[model.provider] = (acc[model.provider] || 0) + 1;
              return acc;
            }, {});
            Object.entries(counts)
              .sort(([,a], [,b]) => b - a)
              .slice(0, 10)
              .map(([provider, count]) => \`\${provider}: \${count}\`)
              .join('\\n')
          ")
          \`\`\`

          ## Categories

          \`\`\`javascript
          $(node -p "
            const { getCategories } = require('./dist/index.cjs');
            getCategories().join(', ')
          ")
          \`\`\`
          EOF

          echo "✅ Documentation updated with current stats"

      - name: Commit changes
        if: steps.check-changes.outputs.has-changes == 'true' || steps.check-updates.outputs.needs-update == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add changed files
          if [[ "${{ steps.check-changes.outputs.has-changes }}" == "true" ]]; then
            git add src/ai-models.ts
          fi
          if [[ "${{ steps.check-updates.outputs.needs-update }}" == "true" ]]; then
            git add bun.lock
          fi

          # Add documentation files
          git add README.md STATS.md

          # Create appropriate commit message
          if [[ "${{ steps.check-updates.outputs.needs-update }}" == "true" ]]; then
            git commit -m "chore: update @ai-sdk dependencies, model types, and documentation [skip ci]"
          else
            git commit -m "chore: update AI model types and documentation [skip ci]"
          fi

          git push

      - name: Type check
        run: bun run typecheck

      - name: Run unit tests
        run: bun run test:unit

      - name: Build package
        run: bun run bundle

      - name: Run integration tests
        run: bun run test:integration-only

      - name: Test package imports
        run: |
          echo "Testing CommonJS import..."
          node -e "
            const pkg = require('./dist/index.cjs');
            console.log('✅ CJS import successful');
            console.log('Providers:', pkg.getProviders().length);
            console.log('Models:', pkg.ALL_MODELS.length);
            console.log('Categories:', pkg.getCategories().length);
          "

          echo "Testing ESM import..."
          node -e "
            import('./dist/index.js').then(pkg => {
              console.log('✅ ESM import successful');
              console.log('Providers:', pkg.getProviders().length);
              console.log('Models:', pkg.ALL_MODELS.length);
              console.log('Categories:', pkg.getCategories().length);
            });
          "

      - name: Get current version
        id: current-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Determine version bump
        id: version-bump
        run: |
          if [[ "${{ steps.check-updates.outputs.needs-update }}" == "true" ]]; then
            echo "bump=minor" >> $GITHUB_OUTPUT
            echo "reason=@ai-sdk dependencies updated with new models and features"
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
            if [[ "${{ steps.check-changes.outputs.has-changes }}" == "true" ]]; then
              echo "reason=Model types updated"
            else
              echo "reason=Maintenance release - no changes detected"
            fi
          fi

      - name: Check if publishing needed
        id: should-publish
        run: |
          if [[ "${{ steps.check-changes.outputs.has-changes }}" == "true" ]] || [[ "${{ steps.check-updates.outputs.needs-update }}" == "true" ]]; then
            echo "should-publish=true" >> $GITHUB_OUTPUT
            echo "✅ Publishing needed - changes detected"
          else
            echo "should-publish=false" >> $GITHUB_OUTPUT
            echo "ℹ️  No changes detected - skipping publish"
          fi

      - name: Bump version
        if: steps.should-publish.outputs.should-publish == 'true'
        id: new-version
        run: |
          NEW_VERSION=$(npm version ${{ steps.version-bump.outputs.bump }} --no-git-tag-version)
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update package files
        if: steps.should-publish.outputs.should-publish == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "chore: bump version to ${{ steps.new-version.outputs.version }} [skip ci]"

      - name: Create git tag
        if: steps.should-publish.outputs.should-publish == 'true'
        run: |
          git tag ${{ steps.new-version.outputs.version }}
          git push origin ${{ steps.new-version.outputs.version }}

      - name: Push version bump
        if: steps.should-publish.outputs.should-publish == 'true'
        run: git push

      - name: Publish to npm
        if: steps.should-publish.outputs.should-publish == 'true'
        run: npm publish --access public --provenance=false
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.should-publish.outputs.should-publish == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.new-version.outputs.version }}
          release_name: Release ${{ steps.new-version.outputs.version }}
          body: |
            ## 🚀 Release ${{ steps.new-version.outputs.version }}

            **Published**: `@simonorzel26/ai-models@${{ steps.new-version.outputs.version }}`

            ### 📊 Stats
            - **Total Models**: $(node -p "require('./dist/index.cjs').ALL_MODELS.length")
            - **Providers**: $(node -p "require('./dist/index.cjs').getProviders().length") supported providers
            - **Categories**: $(node -p "require('./dist/index.cjs').getCategories().length") categories

            ### 🔄 Changes
            - ${{ steps.version-bump.outputs.reason }}

            **What's New:**
            - Updated model types from latest Vercel AI SDK providers
            - Improved TypeScript type definitions and utility functions
            - Updated documentation with current statistics

            **Versioning:**
            - 🟡 **Minor**: New @ai-sdk versions with models and features
            - 🟢 **Patch**: Model type updates or maintenance releases

            ### 📦 Installation
            ```bash
            npm install @simonorzel26/ai-models
            # or
            bun add @simonorzel26/ai-models
            # or
            yarn add @simonorzel26/ai-models
            ```

            ### 🛠️ Usage
            ```typescript
            import { getModelsByProvider, ALL_MODELS } from '@simonorzel26/ai-models';

            // Get all OpenAI models
            const openaiModels = getModelsByProvider('openai');

            // Get all chat models
            const chatModels = getModelsByCategory('chat');

            // Access all models
            console.log(\`Total models: \${ALL_MODELS.length}\`);
            ```

            ### 🔗 Links
            - [Package on npm](https://www.npmjs.com/package/@simonorzel26/ai-models)
            - [Statistics](https://github.com/simonorzel26/ai-models/blob/main/STATS.md)
            - [Documentation](https://github.com/simonorzel26/ai-models#readme)
          draft: false
          prerelease: false

      - name: Notify success
        if: steps.should-publish.outputs.should-publish == 'true'
        run: |
          echo "🎉 Successfully published @simonorzel26/ai-models@${{ steps.new-version.outputs.version }} to npm!"
          echo "📦 Package: https://www.npmjs.com/package/@simonorzel26/ai-models"
          echo "🏷️ Tag: ${{ steps.new-version.outputs.version }}"
          echo "📊 Total Models: $(node -p "require('./dist/index.cjs').ALL_MODELS.length")"
          echo "🏢 Total Providers: $(node -p "require('./dist/index.cjs').getProviders().length")"

      - name: Notify no changes
        if: steps.should-publish.outputs.should-publish == 'false'
        run: |
          echo "ℹ️  No changes detected - skipping publish"
          echo "✅ All @ai-sdk packages are up to date"
          echo "✅ No model type changes detected"