name: Publish to npm

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - '.gitignore'
      - '.github/workflows/ci-cd.yml'
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  BUN_VERSION: '1.2.16'

jobs:
  publish:
    name: Extract, Build & Publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

                                    - name: Check for @ai-sdk package updates
        id: check-updates
        run: |
          echo "Checking if dependencies are up to date..."

          # Check if lockfile is older than 1 day (reasonable for AI SDK updates)
          if [ -f bun.lock ]; then
            LOCKFILE_AGE_DAYS=$((($(date +%s) - $(date -r bun.lock +%s 2>/dev/null || date -d "$(stat -c %y bun.lock)" +%s)) / 86400))

            if [ "$LOCKFILE_AGE_DAYS" -gt 1 ]; then
              echo "‚ö†Ô∏è  Lockfile is $LOCKFILE_AGE_DAYS days old"
              echo "üìÖ Last modified: $(date -r bun.lock 2>/dev/null || stat -c %y bun.lock)"
              echo ""
              echo "‚ùå Exiting workflow to ensure latest @ai-sdk versions are used."
              echo "üí° To update:"
              echo "   1. Run 'bun update' locally to get latest @ai-sdk versions"
              echo "   2. Test the changes with 'bun run test:all'"
              echo "   3. Commit and push the updated bun.lock"
              echo "   4. The workflow will then publish with latest versions"
              exit 1
            else
              echo "‚úÖ Lockfile is recent ($LOCKFILE_AGE_DAYS days old)"
            fi
          else
            echo "‚ö†Ô∏è  No lockfile found"
          fi

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Extract model types
        run: bun src/extract-model-types.ts

      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet src/ai-models.ts; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No model changes detected"
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Model changes detected"
          fi

      - name: Commit model changes
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add src/ai-models.ts bun.lock
          git commit -m "chore: update AI model types [skip ci]"
          git push

      - name: Type check
        run: bun run typecheck

      - name: Run unit tests
        run: bun run test:unit

      - name: Build package
        run: bun run bundle

      - name: Run integration tests
        run: bun run test:integration-only

      - name: Test package imports
        run: |
          echo "Testing CommonJS import..."
          node -e "
            const pkg = require('./dist/index.cjs');
            console.log('‚úÖ CJS import successful');
            console.log('Providers:', pkg.getProviders().length);
            console.log('Models:', pkg.ALL_MODELS.length);
            console.log('Categories:', pkg.getCategories().length);
          "

          echo "Testing ESM import..."
          node -e "
            import('./dist/index.js').then(pkg => {
              console.log('‚úÖ ESM import successful');
              console.log('Providers:', pkg.getProviders().length);
              console.log('Models:', pkg.ALL_MODELS.length);
              console.log('Categories:', pkg.getCategories().length);
            });
          "

      - name: Get current version
        id: current-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Determine version bump
        id: version-bump
        run: |
          if [[ "${{ steps.check-changes.outputs.has-changes }}" == "true" ]]; then
            echo "bump=minor" >> $GITHUB_OUTPUT
            echo "reason=Model updates detected - bumping minor version"
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
            echo "reason=Code changes only - bumping patch version"
          fi

      - name: Bump version
        id: new-version
        run: |
          NEW_VERSION=$(npm version ${{ steps.version-bump.outputs.bump }} --no-git-tag-version)
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update package files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "chore: bump version to ${{ steps.new-version.outputs.version }} [skip ci]"

      - name: Create git tag
        run: |
          git tag ${{ steps.new-version.outputs.version }}
          git push origin ${{ steps.new-version.outputs.version }}

      - name: Push version bump
        run: git push

      - name: Publish to npm
        run: npm publish --access public --provenance=false
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.new-version.outputs.version }}
          release_name: Release ${{ steps.new-version.outputs.version }}
          body: |
            ## üöÄ Release ${{ steps.new-version.outputs.version }}

            **Published**: `@simonorzel26/ai-models@${{ steps.new-version.outputs.version }}`

            ### üìä Stats
            - **Total Models**: Updated with latest AI SDK providers
            - **Providers**: 28+ supported providers
            - **Categories**: Chat, Embedding, Image, Speech, Transcription, etc.

            ### üîÑ Changes
            - ${{ steps.version-bump.outputs.reason }}
            - Updated model types from latest Vercel AI SDK providers
            - Improved TypeScript type definitions and utility functions

            ### üì¶ Installation
            ```bash
            npm install @simonorzel26/ai-models
            # or
            bun add @simonorzel26/ai-models
            # or
            yarn add @simonorzel26/ai-models
            ```

            ### üõ†Ô∏è Usage
            ```typescript
            import { getModelsByProvider, ALL_MODELS } from '@simonorzel26/ai-models';

            // Get all OpenAI models
            const openaiModels = getModelsByProvider('openai');

            // Get all chat models
            const chatModels = getModelsByCategory('chat');

            // Access all models
            console.log(\`Total models: \${ALL_MODELS.length}\`);
            ```
          draft: false
          prerelease: false

      - name: Notify success
        run: |
          echo "üéâ Successfully published @simonorzel26/ai-models@${{ steps.new-version.outputs.version }} to npm!"
          echo "üì¶ Package: https://www.npmjs.com/package/@simonorzel26/ai-models"
          echo "üè∑Ô∏è Tag: ${{ steps.new-version.outputs.version }}"
          echo "üìä Total Models: $(node -p "require('./dist/index.cjs').ALL_MODELS.length")"
          echo "üè¢ Total Providers: $(node -p "require('./dist/index.cjs').getProviders().length")"